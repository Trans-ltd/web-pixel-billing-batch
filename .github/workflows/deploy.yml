name: Deploy to Cloud Functions

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: growth-force-project
  FUNCTION_NAME: web-pixel-billing-batch
  REGION: asia-northeast1
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        project_id: growth-force-project
        workload_identity_provider: projects/32670171847/locations/global/workloadIdentityPools/github-pool/providers/github-provider
        service_account: github-actions-deploy@growth-force-project.iam.gserviceaccount.com

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Verify IAM permissions
      run: |
        echo "Checking IAM permissions for service account..."
        SERVICE_ACCOUNT="github-actions-deploy@growth-force-project.iam.gserviceaccount.com"
        
        # Check if the service account has necessary roles
        REQUIRED_ROLES=(
          "roles/cloudfunctions.admin"
          "roles/run.admin"
        )
        
        echo "Current IAM policy for $SERVICE_ACCOUNT:"
        gcloud projects get-iam-policy $PROJECT_ID \
          --flatten="bindings[].members" \
          --filter="bindings.members:serviceAccount:$SERVICE_ACCOUNT" \
          --format="table(bindings.role)" || true
        
        echo ""
        echo "Note: If deployment fails with permission errors, run scripts/setup-iam-permissions.sh locally"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Deploy to Cloud Functions
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_PRIVATE_KEY_ID: ${{ secrets.GCP_PRIVATE_KEY_ID }}
        GCP_PRIVATE_KEY: ${{ secrets.GCP_PRIVATE_KEY }}
        GCP_CLIENT_EMAIL: ${{ secrets.GCP_CLIENT_EMAIL }}
        GCP_CLIENT_ID: ${{ secrets.GCP_CLIENT_ID }}
        GCP_CLIENT_X509_CERT_URL: ${{ secrets.GCP_CLIENT_X509_CERT_URL }}
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL_IDS: ${{ secrets.SLACK_CHANNEL_IDS }}
        SLACK_TEAM_ID: ${{ secrets.SLACK_TEAM_ID }}
        BILLING_RATE_PER_MILLION: ${{ secrets.BILLING_RATE_PER_MILLION }}
        BILLING_TIME: ${{ secrets.BILLING_TIME }}
        TIMEZONE: ${{ secrets.TIMEZONE }}
      run: |
        gcloud functions deploy $FUNCTION_NAME \
          --gen2 \
          --runtime=nodejs20 \
          --region=$REGION \
          --source=dist \
          --entry-point=processBilling \
          --trigger-http \
          --allow-unauthenticated \
          --memory=256M \
          --timeout=540s \
          --max-instances=1 \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,NODE_ENV=production,GCP_PROJECT_ID=$GCP_PROJECT_ID,GCP_PRIVATE_KEY_ID=$GCP_PRIVATE_KEY_ID,GCP_PRIVATE_KEY=$GCP_PRIVATE_KEY,GCP_CLIENT_EMAIL=$GCP_CLIENT_EMAIL,GCP_CLIENT_ID=$GCP_CLIENT_ID,GCP_CLIENT_X509_CERT_URL=$GCP_CLIENT_X509_CERT_URL,SLACK_BOT_TOKEN=$SLACK_BOT_TOKEN,SLACK_CHANNEL_IDS=$SLACK_CHANNEL_IDS,SLACK_TEAM_ID=$SLACK_TEAM_ID,BILLING_RATE_PER_MILLION=$BILLING_RATE_PER_MILLION,BILLING_TIME=$BILLING_TIME,TIMEZONE=$TIMEZONE"

    - name: Create or update Cloud Scheduler job
      run: |
        # Get function trigger URL
        FUNCTION_URL=$(gcloud functions describe $FUNCTION_NAME --region=$REGION --format='value(serviceConfig.uri)')
        
        # Check if scheduler job exists
        if gcloud scheduler jobs describe shopify-billing-batch --location=$REGION --quiet 2>/dev/null; then
          echo "Updating existing scheduler job..."
          gcloud scheduler jobs update http shopify-billing-batch \
            --location=$REGION \
            --schedule="0 1 * * *" \
            --time-zone="Asia/Tokyo" \
            --uri="$FUNCTION_URL" \
            --http-method=POST \
            --update-headers="Content-Type=application/json" \
            --message-body="{}"
        else
          echo "Creating new scheduler job..."
          gcloud scheduler jobs create http shopify-billing-batch \
            --location=$REGION \
            --schedule="0 1 * * *" \
            --time-zone="Asia/Tokyo" \
            --uri="$FUNCTION_URL" \
            --http-method=POST \
            --headers="Content-Type=application/json" \
            --message-body="{}"
        fi

    - name: Output function URL
      run: |
        echo "Function deployed successfully!"
        gcloud functions describe $FUNCTION_NAME --region=$REGION --format='value(serviceConfig.uri)'